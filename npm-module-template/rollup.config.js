import babel from '@rollup/plugin-babel';
import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';

import { terser } from 'rollup-plugin-terser';
import visualizer from 'rollup-plugin-visualizer';

const resolvePlugin = resolve({
	mainFields: ['module', 'main'],
	extensions: ['.js', '.json']
});

const babelPlugin = babel({
	babelHelpers: 'runtime',
	skipPreflightCheck: true,
	extensions: ['.js'],
	// prevents babel from modifying sourcemap generated by rollup
	inputSourceMap: false
});

export default [
	/**
	 * UMD stands for Universal Module Definition
	 * This would work for both a frontend or a backend module.
	 */
	// UMD
	{
		input: 'src/index.js',
		output: {
			file: 'dist/bundle.umd.js',
			format: 'umd',
			// Enter a global variable name that will be used for this library. 
			// If, used in the browser (ie, MyAwesomeLib in window.MyAwesomeLib)
			// Using the package name. Replace, if needed.
			name: '<%= packageName %>',
			sourcemap: true
		},
		plugins: [
			resolvePlugin,
			babelPlugin,
			commonjs(),
			terser(),
			visualizer({
				filename: 'dist/bundle-visualizer-umd.html'
			})
		]
	}

	/**
	 * ESM stands for ECMAScript Modules
	 * Works with many modern browsers -> https://caniuse.com/es6-module
	 * Tree-shakeable, due to ES6's static module structure.
	 * Use this only if you don't care abt IE ðŸ˜› 
	 */
	// ESM
	/*
		{
			input: 'src/index.js',
			output: {
				file: 'dist/bundle.esm.js',
				format: 'es',
				globals,
				sourcemap: true
			},
			external: Object.keys(globals),
			plugins: [
				resolvePlugin,
				babelPlugin,
				commonjs(),
				terser(),
				visualizer({
					filename: 'dist/bundle-visualizer-es.html'
				})
			]
		}
	*/
];
